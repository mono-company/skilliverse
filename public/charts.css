
@supports (
	(
		-webkit-clip-path: polygon(calc(0% 0%, 100% - (var(--1) * 100% / var(--scale))) 100%, 100% 100%))
		or
		(clip-path: polygon(calc(0% 0%, 100% - (var(--1) * 100% / var(--scale))) 100%, 100% 100%)
		)
	)
	{

	.radar-container .fieldset {
		display: flex !important;
	}

	.chaarts[class*="radar"] {
		--radius: 11.8em;
		--unitless-radius: calc(1024 / 16 / 5);
		--size: calc(var(--radius) / var(--scale));
		--part: calc(360deg / var(--items));
		background-image:
			repeating-radial-gradient(circle at 50%,
				rgba(0, 0, 0, 0.1),
				rgba(0, 0, 0, 0.05) 1px,
				transparent 0,
				transparent calc(var(--size) * var(--step))),
			repeating-radial-gradient(
				circle at 50%,rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 1px, transparent 0, transparent var(--size));
		border: 0.2rem solid #CCC;
		border-radius: 50%;
		contain: layout;
		counter-reset: scale var(--scale);
		height: calc(var(--radius) * 2);
		margin: 6rem auto 6rem;
		overflow: visible;
		position: relative;
		width: calc(var(--radius) * 2);

	/**
     * Placing items around a circle based on:
     * @link https://stackoverflow.com/questions/12813573/position-icons-into-circle
     * @link http://dabblet.com/gist/3866686
     * @author Ana Tudor
     *
     * @note Negative values for radius helps to start at the top left corner
     */
		/**
     * This is quite sophisticated, we're mixing multiple techniques
     *
     * @note Setting items as parts of the circle:
     * @link https://tympanus.net/codrops/2013/08/09/building-a-circular-navigation-with-css-transforms/
     * @author Sara Soueidan
     *
     * @note Because we skew items, clip-path() needs to take skew angle into account
     * @note To do so, we need to know skewed width (which is hypothenuse of the resulting triangle)
     * @note We only know two angles (skew one + suqare one) and a side (initial width),
     * @note So we need to compute the sinus of the opposite angle to get hypothenuse
     * @note Thanks god, Stereokai made trigonometry functions in pure CSS:
     *
     * @note Trigonometry functions based on:
     * @link https://gist.github.com/stereokai/7666bfe93929b14c2dced148c79e0e97
     * @author Stereokai
     */
	}

	.chaarts[class*="radar"] caption {
		background: none;
		bottom: -10rem;
		position: absolute;
	}

	.chaarts[class*="radar"] [scope="col"] {
		--away: calc((var(--radius) * -1) - 50%);
		left: 50%;
		margin: 0;
		padding: 4.5rem;
		font-size: 1.1rem;
		font-weight: 400;
		color: #666;
		position: absolute;
		top: 50%;
		transform:
			translate3d(-50%, -50%, 0)
			rotate(calc(var(--part) * var(--index, 1)))
			translate(var(--away))
			rotate(calc(var(--part) * var(--index, 1) * -1));
	}

	.chaarts[class*="radar"] tr>*:nth-of-type(1) { --index: 1; }
	.chaarts[class*="radar"] tr>*:nth-of-type(2) { --index: 2; }
	.chaarts[class*="radar"] tr>*:nth-of-type(3) { --index: 3; }
	.chaarts[class*="radar"] tr>*:nth-of-type(4) { --index: 4; }
	.chaarts[class*="radar"] tr>*:nth-of-type(5) { --index: 5; }
	.chaarts[class*="radar"] tr>*:nth-of-type(6) { --index: 6; }
	.chaarts[class*="radar"] tr>*:nth-of-type(7) { --index: 7; }
	.chaarts[class*="radar"] tr>*:nth-of-type(8) { --index: 8; }
	.chaarts[class*="radar"] tr>*:nth-of-type(9) { --index: 9; }
	.chaarts[class*="radar"] tr>*:nth-of-type(10) { --index: 10; }

	.chaarts[class*="radar"] td {
		--skew: calc(90deg - var(--part));
		border-bottom: 1px solid blueviolet;
		height: 50%;
		left: 0;
		margin: 0;
		position: absolute;
		top: 0;
		transform: rotate(calc(var(--part) * var(--index, 1))) skew(var(--skew));
		transform-origin: 100% 100%;
		width: 50%;
	}
	/* This is the viz for the radar parts themselsves */

	.chaarts[class*="radar"] td:nth-of-type(1) span {
		--point: var(--1);
		--pos: calc(100% - (var(--2) * 100% / (var(--scale) * var(--ratio))));
	}

	.chaarts[class*="radar"] td:nth-of-type(2) span {
		--point: var(--2);
		--pos: calc(100% - (var(--3) * 100% / (var(--scale) * var(--ratio))));
	}

	.chaarts[class*="radar"] td:nth-of-type(3) span {
		--point: var(--3);
		--pos: calc(100% - (var(--4) * 100% / (var(--scale) * var(--ratio))));
	}

	.chaarts[class*="radar"] td:nth-of-type(4) span {
		--point: var(--4);
		--pos: calc(100% - (var(--5) * 100% / (var(--scale) * var(--ratio))));
	}

	.chaarts[class*="radar"] td:nth-of-type(5) span {
		--point: var(--5);
		--pos: calc(100% - (var(--6) * 100% / (var(--scale) * var(--ratio))));
	}

	.chaarts[class*="radar"] td:nth-of-type(6) span {
		--point: var(--6);
		--pos: calc(100% - (var(--7) * 100% / (var(--scale) * var(--ratio))));
	}

	.chaarts[class*="radar"] td:nth-of-type(7) span {
		--point: var(--7);
		--pos: calc(100% - (var(--8) * 100% / (var(--scale) * var(--ratio))));
	}

	.chaarts[class*="radar"] td:nth-of-type(8) span {
		--point: var(--8);
		--pos: calc(100% - (var(--9) * 100% / (var(--scale) * var(--ratio))));
	}

	.chaarts[class*="radar"] td:nth-of-type(9) span {
		--point: var(--9);
		--pos: calc(100% - (var(--10) * 100% / (var(--scale) * var(--ratio))));
	}

	.chaarts[class*="radar"] td:nth-of-type(10) span {
		--point: var(--10);
		--pos: calc(100% - (var(--11) * 100% / (var(--scale) * var(--ratio))));
	}

	.chaarts[class*="radar"] td::after,
	.chaarts[class*="radar"] td::before {
		display: none;
	}

	.chaarts[class*="radar"] span {
		--opposite: calc(180 - (90 + (90 - (360 / var(--items)))));
		--angle: calc(var(--opposite) * 0.01745329251);
		--sin-term-angle-1: var(--angle);
		--sin-term-angle-2: calc((var(--angle) * var(--angle) * var(--angle)) / 6);
		--sin-term-angle-3: calc((var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle)) / 120);
		--sin-term-angle-4: calc((var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle)) / 5040);
		--sin-term-angle-5: calc((var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle)) / 362880);
		--sin-angle: calc(var(--sin-term-angle-1) - var(--sin-term-angle-2) + var(--sin-term-angle-3) - var(--sin-term-angle-4) + var(--sin-term-angle-5));
		--hypo: calc(var(--unitless-radius) / var(--sin-angle));
		--ratio: calc(var(--hypo) / var(--unitless-radius));
		background: linear-gradient(to top left, blueviolet 10%, DarkBlue 75%);
		-webkit-clip-path: polygon(100% var(--pos), calc(100% - (var(--point) * 100% / var(--scale))) 100%, 100% 100%);
		clip-path: polygon(100% var(--pos), calc(100% - (var(--point) * 100% / var(--scale))) 100%, 100% 100%);
		-webkit-filter: drop-shadow(0 0 1rem indigo);
		filter: drop-shadow(0 0 1rem indigo);
		height: 100%;
		position: absolute;
		width: 100%;
	}

	/**
   * 1.
   * @note Display CSS integers custom properties with a trick using counters
   * @author Cassie Evans
   * @link https://codepen.io/cassie-codes/pen/22ea69e0f681d45f2f4c2ca5e6acf4ab
   */
	.chaarts.radar [scope="col"]::after {
		color: rebeccapurple;
		display: block;
		font-size: 1.1rem;
		font-weight: 400;
	}

	.chaarts.radar [scope="col"]:nth-child(1)::after {
		counter-reset: value var(--1);
		content: counter(value) " / "counter(scale);
	}

	.chaarts.radar [scope="col"]:nth-child(2)::after {
		counter-reset: value var(--2);
		content: counter(value) " / "counter(scale);
	}

	.chaarts.radar [scope="col"]:nth-child(3)::after {
		counter-reset: value var(--3);
		content: counter(value) " / "counter(scale);
	}

	.chaarts.radar [scope="col"]:nth-child(4)::after {
		counter-reset: value var(--4);
		content: counter(value) " / "counter(scale);
	}

	.chaarts.radar [scope="col"]:nth-child(5)::after {
		counter-reset: value var(--5);
		content: counter(value) " / "counter(scale);
	}

	.chaarts.radar [scope="col"]:nth-child(6)::after {
		counter-reset: value var(--6);
		content: counter(value) " / "counter(scale);
	}

	.chaarts.radar [scope="col"]:nth-child(7)::after {
		counter-reset: value var(--7);
		content: counter(value) " / "counter(scale);
	}

	.chaarts.radar [scope="col"]:nth-child(8)::after {
		counter-reset: value var(--8);
		content: counter(value) " / "counter(scale);
	}

	.chaarts.radar-multiple tbody {
		-moz-columns: var(--areas);
		columns: var(--areas);
		vertical-align: bottom;
	}

	.chaarts.radar-multiple [scope="row"] {
		display: none;
	}

	.chaarts.radar-multiple td {
		align-items: flex-end;
		border-color: #CCC;
		display: flex;
		justify-content: flex-end;
		opacity: .5;
		pointer-events: none;
		z-index: 0;
	}

	.chaarts.radar-multiple td::after {
		color: var(--color, currentColor);
		display: block;
		font-size: 1.1rem;
		font-weight: 400;
		/* Fake text stroke by combining 4 box shadows. Bit hacky but OK */
		filter:
			drop-shadow(-1px 0 0 white)
			drop-shadow(0 -1px 0 white)
			drop-shadow(1px 0 0 white)
			drop-shadow(0 1px 0 white)
		;
		text-indent: -0.5rem;
		transform: skew(calc(var(--skew) * -1)) rotate(calc(var(--part) * var(--index, 1) * -1));
		transform-origin: 0 0;
		width: 100%;
		white-space: nowrap;
	}

	.chaarts.radar-multiple td:nth-of-type(1)::after {
		counter-reset: value var(--1);
		content: counter(value);
		width: calc(var(--1) * 100% / var(--scale));
	}

	.chaarts.radar-multiple td:nth-of-type(2)::after {
		counter-reset: value var(--2);
		content: counter(value);
		width: calc(var(--2) * 100% / var(--scale));
	}

	.chaarts.radar-multiple td:nth-of-type(3)::after {
		counter-reset: value var(--3);
		content: counter(value);
		width: calc(var(--3) * 100% / var(--scale));
	}

	.chaarts.radar-multiple td:nth-of-type(4)::after {
		counter-reset: value var(--4);
		content: counter(value);
		width: calc(var(--4) * 100% / var(--scale));
	}

	.chaarts.radar-multiple td:nth-of-type(5)::after {
		counter-reset: value var(--5);
		content: counter(value);
		width: calc(var(--5) * 100% / var(--scale));
	}

	.chaarts.radar-multiple td:nth-of-type(6)::after {
		counter-reset: value var(--6);
		content: counter(value);
		width: calc(var(--6) * 100% / var(--scale));
	}

	.chaarts.radar-multiple td:nth-of-type(7)::after {
		counter-reset: value var(--7);
		content: counter(value);
		width: calc(var(--7) * 100% / var(--scale));
	}

	.chaarts.radar-multiple td:nth-of-type(8)::after {
		counter-reset: value var(--8);
		content: counter(value);
		width: calc(var(--8) * 100% / var(--scale));
	}

	.chaarts.radar-multiple td:nth-of-type(9)::after {
		counter-reset: value var(--9);
		content: counter(value);
		width: calc(var(--9) * 100% / var(--scale));
	}

	.chaarts.radar-multiple td:nth-of-type(10)::after {
		counter-reset: value var(--10);
		content: counter(value);
		width: calc(var(--10) * 100% / var(--scale));
	}

	.chaarts.radar-multiple span {
		background: var(--color, currentColor);
		pointer-events: auto;
	}

	@supports ((-webkit-mask-image: url()) or (mask-image: url())) {
		.chaarts.radar-multiple span {
			-webkit-mask-image: radial-gradient(circle at bottom right, black, rgba(0, 0, 0, 0.5));
			mask-image: radial-gradient(circle at bottom right, black, rgba(0, 0, 0, 0.5));
		}
	}

	@media (hover: hover) {
		.chaarts.radar-multiple td {
			opacity: .25;
			transition: opacity 0.2s cubic-bezier(0.5, 0, 0.5, 1);
			will-change: opacity;
		}

		.chaarts.radar-multiple td::after {
			opacity: 0;
			transition: inherit;
			will-change: inherit;
		}

		.chaarts.radar-multiple tr:hover td {
			opacity: 1;
			z-index: 1;
		}

		.chaarts.radar-multiple tr:hover td::after {
			opacity: inherit;
		}
	}
}